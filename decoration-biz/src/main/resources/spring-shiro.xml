<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 权限管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!--&lt;!&ndash; 登录地址 &ndash;&gt;-->
        <!--<property name="loginUrl" value="/login.jsp"/>-->
        <!--&lt;!&ndash; 登录后跳转到业务页面 &ndash;&gt;-->
        <!--<property name="successUrl" value="/main.jsp"/>-->
        <!--&lt;!&ndash; 错误页面 &ndash;&gt;-->
        <!--<property name="unauthorizedUrl" value="/error.jsp"/>-->
        <property name="filters">
            <map>
                <entry key="authc">
                    <bean class="me.nithans.decoration.biz.shiro.filter.MyFormAuthenticationFilter" />
                </entry>
            </map>
        </property>
        <!-- 权限配置 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon无权限访问请求，此处是登录页面和登录请求 -->
                /account/login = anon
                /account/register = anon
                <!--/swagger-ui.html = anon-->
                <!--/swagger-resources = anon-->
                <!--/v2/api-docs = anon-->
                <!--/webjars/springfox-swagger-ui/** = anon-->
                <!--/login/** = anon-->
                <!--/company/business/callback = anon-->
                <!--/car/rawdata/replace = anon-->
                <!--拦截非静态资源的所有请求-->
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 配置权限管理器 -->
    <bean id="myShiro" class="me.nithans.decoration.biz.shiro.realm.UserRealm"></bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 我们自定义的realm -->
        <property name="realm" ref="myShiro"/>
        <!-- 缓存管理器 -->
        <property name="cacheManager" ref="redisCacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- shiro会话管理 -->
    <!-- 即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="cacheManager" ref="redisCacheManager"/>
        <property name="sessionDAO" ref="redisSessionDAO"/>
        <property name="sessionIdCookie" ref="simpleCookie"/>
        <!-- 全局的会话信息时间,,单位为毫秒  -->
        <property name="globalSessionTimeout" value="7200000"/>
        <!-- 检测扫描信息时间间隔,单位为毫秒-->
        <property name="sessionValidationInterval" value="60000"/>
        <!-- 是否开启扫描 -->
        <property name="sessionValidationSchedulerEnabled" value="false"/>
        <!-- 去掉URL中的JSESSIONID -->
        <property name="sessionIdUrlRewritingEnabled" value="true"/>
    </bean>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 设置Cookie名字, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
                                    当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
        <property name="name" value="sid"/>
        <!-- JSESSIONID的path为/用于多个系统共享JSESSIONID -->
        <property name="path" value="/"/>
        <!-- 浏览器中通过document.cookie可以获取cookie属性，设置了HttpOnly=true,在脚本中就不能的到cookie，可以避免cookie被盗用 -->
        <property name="httpOnly" value="true"/>
    </bean>


    <bean id="redisCacheManager" class="org.crazycake.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <bean id="redisManager" class="org.crazycake.shiro.RedisManager">
        <property name="host" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="expire" value="7200"/>
        <property name="timeout" value="7200"/>
    </bean>

    <bean id="redisSessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="authorizationAttributeSourceAdvisor" class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="exceptionHandler" class="me.nithans.decoration.biz.shiro.exception.ShiroExceptionHandler"/>

    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
    </bean>
</beans>